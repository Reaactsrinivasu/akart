{"version":3,"file":"static/js/666.73fa40fd.chunk.js","mappings":"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","sources":["API/Constants.js","API/API.js","common/Validations.js","redux/apis/emailLoginApi.js","redux/actions/emailLoginActions.js","pages/UserAuthentication/Login/EmailLogin.js"],"sourcesContent":["\r\nexport const BASE_URL = \"http://64.227.181.53:3000/\"; // current working url\r\nexport const STATUS_CODE = {\r\n  INTERNAL_SERVER_ERROR: 500,\r\n  SUCCESS: 200,\r\n};\r\n","import axios from \"axios\";\r\nimport { STATUS_CODE, BASE_URL } from \"./Constants\";\r\nimport { toast } from \"react-toastify\";\r\n// Request Methods\r\nconst METHOD = {\r\n  GET: \"get\",\r\n  POST: \"post\",\r\n  PUT: \"put\",\r\n  DELETE: \"delete\",\r\n};\r\n/*\r\n * API controller that for handling the request\r\n */\r\nclass API {\r\n  isLoggedIn = false;\r\n  userData = {};\r\n  userToken = null;\r\n  constructor() {\r\n    this.baseURL = BASE_URL;\r\n  }\r\n  get(url, data) {\r\n    return new Promise((resolve, reject) => {\r\n      this.api(METHOD.GET, url, data)\r\n        .then((response) => {\r\n          resolve(response);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    });\r\n  }\r\n  post(url, data) {\r\n    return new Promise((resolve, reject) => {\r\n      this.api(METHOD.POST, url, data)\r\n        .then((response) => {\r\n          resolve(response);\r\n          // console.log('response',response);\r\n        })\r\n        .catch((error) => {\r\n          // console.log(error);\r\n        });\r\n    });\r\n  }\r\n  put(url, data) {\r\n    return new Promise((resolve, reject) => {\r\n      this.api(METHOD.PUT, url, data)\r\n        .then((response) => {\r\n          resolve(response);\r\n        })\r\n        .catch((error) => {\r\n          // console.log(error);\r\n        });\r\n    });\r\n  }\r\n  delete(url, data) {\r\n    return new Promise((resolve, reject) => {\r\n      this.api(METHOD.DELETE, url, data)\r\n        .then((response) => {\r\n          resolve(response);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    });\r\n  }\r\n  // Main function with hold the axios request param\r\n  api(method, url, data) {\r\n    return new Promise((resolve, reject) => {\r\n      let axiosConfig = {};\r\n      axiosConfig.method = method;\r\n      axiosConfig.url = this.baseURL + url;\r\n      axiosConfig.headers = this.setHeaders(data);\r\n      if (data) {\r\n        // if (data) axiosConfig.params = data;\r\n        if (data) axiosConfig.data = data;\r\n      }\r\n\r\n      axios(axiosConfig)\r\n        .then((response) => {\r\n          if (\r\n            response &&\r\n            response.status === STATUS_CODE.INTERNAL_SERVER_ERROR\r\n          ) {\r\n            alert(\"Something went wrong!!\");\r\n          } else {\r\n            // resolve(response.data);  \r\n            resolve(response);\r\n            if (response) {\r\n              console.log('response', response);\r\n              toast.success(response.data?.message); \r\n            }\r\n          }\r\n          // console.log(\"response\", response);\r\n        })\r\n        .catch((error) => {\r\n          let err = error?.response;\r\n          let errData = error?.response.data;\r\n          console.log(\"ERROR\", error);\r\n          // switch (true) {\r\n          //   case error.response?.data?.email[0] === \"has already been taken\":\r\n          //     toast.error(`Email ${error.response?.data?.email[0]}`);\r\n          //     break;\r\n          //   case error.response.data?.phone_number[0] ===\r\n          //     \"has already been taken\":\r\n          //     toast.error(\r\n          //       `Mobile Number ${error.response?.data?.phone_number[0]}`\r\n          //     );\r\n          //     break;\r\n          //   default:\r\n          //     // Handle other errors if needed\r\n          //     break;\r\n          // }\r\n          // console.log(\"phone_number\", error.response.data?.phone_number[0]);\r\n          // if(\r\n          //   error.response.data?.phone_number[0] === \"has already been taken\"\r\n          // ) {\r\n          //   toast.error(\r\n          //     `Mobile Number ${error.response.data?.phone_number[0]}`\r\n          //   );\r\n          // }\r\n          // if (error.response.data?.email[0] === 'has already been taken') {\r\n          // toast.error(`email ${error.response.data?.email[0]}`);\r\n          // }\r\n          if (\r\n            error.response.data?.email &&\r\n            error.response.data.email.length > 0\r\n          ) {\r\n            toast.error(`Email ${error.response.data.email[0]}`);\r\n          } else if (\r\n            error.response.data?.phone_number &&\r\n            error.response.data.phone_number.length > 0\r\n          ) {\r\n            toast.error(`Mobile Number ${error.response.data.phone_number[0]}`);\r\n          } else if (\r\n            error.response.data.message &&\r\n            error.response.data.message.length > 0\r\n          ) {\r\n            toast.error(`${error.response.data.message}`);\r\n          } else if(err?.status===401){\r\n            toast.error(`${errData.errors}`);\r\n          } else {\r\n            toast.error(\"An error occurred\");\r\n          }\r\n          //DEFAULT ERROR HANDLING\r\n        });\r\n    });\r\n  }\r\n  // Set the header for request\r\n  setHeaders(data) {\r\n    let headers = {};\r\n    headers[\"accept-language\"] = \"en\";\r\n    headers[\"Content-Type\"] = \"application/json\";\r\n    headers[\"Accept\"] = \"application/json\";\r\n    headers[\"Authorization\"] = localStorage.getItem(\"token\");\r\n    if (data) {\r\n      if (data.isMultipart) {\r\n        headers[\"Content-Type\"] = \"multipart/form-data\";\r\n      }\r\n      if (data.headers) {\r\n        for (var key in data.headers) {\r\n          if (data.headers.hasOwnProperty(key)) {\r\n            headers[key] = data.headers[key];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return headers;\r\n  }\r\n}\r\nexport default API;\r\n","import * as Yup from \"yup\";\r\nconst generateValidationSchema = (fields) => {\r\n  const validationRules = {};\r\n  fields.forEach((field) => {\r\n    switch (field) {\r\n      case \"name\":\r\n        validationRules.name = Yup.string()\r\n          .min(2, \"Name is Short!\")\r\n          .max(50, \"Name is Long!\")\r\n          .required(\"Name is required\");\r\n        break;\r\n      case \"email\":\r\n        validationRules.email = Yup.string()\r\n          .email(\"Invalid email address format\")\r\n          .required(\"Email is required\");\r\n        break;\r\n      case \"mobile_number\":\r\n        validationRules.mobile_number = Yup.string()\r\n          .required(\"Mobile Number is required\")\r\n          .matches(/^[6-9][0-9]{9}$/, \"Invalid Mobile Number\");\r\n        break;\r\n      case \"phone_number\":\r\n        validationRules.phone_number = Yup.string()\r\n          .required(\"Phone Number is required\")\r\n          .matches(/^[6-9][0-9]{9}$/, \"Invalid Phone Number\");\r\n        break;\r\n      case \"relationship\":\r\n        validationRules.relationship = Yup.string()\r\n          .min(3, \"Relationship is Short!\")\r\n          .max(50, \"Relationship is Long!\")\r\n          .required(\"Relationship is required\");\r\n        break;\r\n      case \"address\":\r\n        validationRules.address = Yup.string()\r\n          .min(5, \"Address is Short!\")\r\n          .max(100, \"Address is Long!\")\r\n          .required(\"Address is required\");\r\n        break;\r\n      case \"first_name\":\r\n        validationRules.first_name = Yup.string()\r\n          .min(2, \"First Name is Short!\")\r\n          .max(50, \"First Name is Long!\")\r\n          .required(\"First Name is required\");\r\n        break;\r\n      case \"last_name\":\r\n        validationRules.last_name = Yup.string()\r\n          .min(2, \"Last Name is Short!\")\r\n          .max(50, \"Last Name is Long!\")\r\n          .required(\"Last Name is required\");\r\n        break;\r\n      case \"password\":\r\n        validationRules.password = Yup.string()\r\n          .min(8, \"Password should be at least 8 characters\")\r\n          .required(\"Password is required\");\r\n        // .validateSync(value, { abortEarly: false }) || \"\";\r\n        break;\r\n      case \"new_password\":\r\n        validationRules.new_password = Yup.string()\r\n          .min(8, \"New Password should be at least 8 characters\")\r\n          .required(\"New Password is required\");\r\n        // .validateSync(value, { abortEarly: false }) || \"\";\r\n        break;\r\n      case \"password_confirmation\":\r\n        validationRules.password_confirmation = Yup.string()\r\n          .min(8, \"Password should be at least 8 characters\")\r\n          .required(\"Confirm Password is required\");\r\n        // .validateSync(value, { abortEarly: false }) || \"\";\r\n        break;\r\n\r\n      // Add additional fields as needed\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n \r\n  return Yup.object(validationRules);\r\n};\r\n \r\nconst initialValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  mobile_number: \"\",\r\n  relationship: \"\",\r\n  address: \"\",\r\n  first_name: \"\",\r\n  password: \"\",\r\n  password_confirmation: \"\"\r\n  \r\n};\r\n \r\nexport { initialValues, generateValidationSchema };","import API from \"../../API/API.js\";\r\nconst api = new API();\r\nconst endPoints = \"/login\";\r\nexport const createEmailLoginApi = async (users) => {\r\n  // console.log('users in api', users);\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const result = await api.post(`${endPoints}`, users);\r\n      resolve(result);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n","import * as types from \"./actionTypes\";\r\nimport { createEmailLoginApi } from \"../apis/emailLoginApi\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\n//post Login with email id\r\nexport const createLoginWithEmailIdStart = (users) =>\r\n  // console.log('users', users),\r\n  ({\r\n    type: types.LOGIN_WITH_EMAILID_START,\r\n    payload: users,\r\n  });\r\nexport const createLoginWithEmailIdSuccess = () => ({\r\n  type: types.LOGIN_WITH_EMAILID_SUCCESS,\r\n});\r\nexport const createLoginWithEmailIdError = (error) => ({\r\n  type: types.LOGIN_WITH_EMAILID_ERROR,\r\n  payload: error,\r\n});\r\nexport const loginWithEmailInitiate = (user, navigate) => {\r\n  return function (dispatch) {\r\n    dispatch(createLoginWithEmailIdStart(user));\r\n    createEmailLoginApi(user)\r\n      .then((res) => {\r\n        // let email = res.data?.account.email;\r\n        // let id = res.data?.account.id;\r\n        // let userData = { email: email, id: id };\r\n        console.log(res);\r\n        console.log(\"res in api\", res.status);\r\n        const token = res?.data.token;\r\n        console.log(\"res token\", token);\r\n        localStorage.setItem(\"token\", token);\r\n        dispatch(createLoginWithEmailIdSuccess(res));\r\n        if (res.status === 200) {\r\n          navigate(\"/welcomepage\");\r\n        }\r\n      })\r\n      .catch((error) => dispatch(createLoginWithEmailIdError(error.message)));\r\n  };\r\n};\r\nexport default {\r\n  loginWithEmailInitiate,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Link from \"@mui/material/Link\";  \r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Container from \"@mui/material/Container\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\r\nimport { FormLabel } from \"@mui/material\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport EditOutlinedIcon from \"@mui/icons-material/EditOutlined\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { useFormik } from \"formik\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { loginWithEmailInitiate } from \"../../../redux/actions/emailLoginActions\";\r\nimport {\r\n  initialValues,\r\n  generateValidationSchema,\r\n} from \"../../../common/Validations\";\r\nconst EmailLogin = () => {\r\n  // Use the credential value as needed in your component\r\n  //  console.log(\"data:\", data);\r\n  //  console.log(\"Email:\", credential);\r\n  \r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const receivedData = location?.state;\r\n  // console.log('receivedData',receivedData);\r\n  // const [emailLoginData, setEmailLoginData] = useState({\r\n  //   email: receivedData,\r\n  //   email: \"\",\r\n  //   type: \"email_account\",\r\n  // });\r\n\r\n  const gotoPreviousPageHandler = (emailtoedit) => {\r\n    // console.log(\"emailtoedit\", emailtoedit);\r\n    navigate(\"/login\", { state: emailtoedit });\r\n  };\r\n  // const onInputChange = (e) => {\r\n  //   // console.log(\"emailLoginData\", emailLoginData);\r\n  //   let { name, value } = e.target;\r\n  //   setEmailLoginData({ ...emailLoginData, [name]: value });\r\n  // };\r\n  const handleSubmit = async (values) => {\r\n     console.log(\"email login \", values)\r\n     try {\r\n        dispatch(loginWithEmailInitiate(values, navigate));\r\n     } catch (error) {}\r\n   };\r\n   const formFields = [\"email\",\"password\"];\r\n   const validationSchema = generateValidationSchema(formFields);\r\n   const formik = useFormik({\r\n     initialValues: {\r\n       email: \"\",\r\n       password:\"\",\r\n       type: \"email_account\",\r\n     },\r\n     validationSchema: validationSchema,\r\n     onSubmit: (values) => handleSubmit(values),\r\n   });\r\n  return (\r\n    <Container\r\n      component=\"main\"\r\n      maxWidth=\"xs\"\r\n      sx={{\r\n        margin: \"auto\",\r\n      }}\r\n    >\r\n      <Box>\r\n        <Paper\r\n          elevation={1}\r\n          variant=\"elevation\"\r\n          square={false}\r\n          sx={{\r\n            marginTop: 8,\r\n            // padding: \"20px\",\r\n            display: \"flex\",   \r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            bgcolor: \"#fff\",\r\n          }}\r\n        >\r\n          <Typography component=\"h1\" variant=\"h5\" mt={2}>\r\n            Log In\r\n          </Typography>\r\n          <form\r\n            onSubmit={formik.handleSubmit}\r\n            component=\"form\"\r\n            style={{ padding: \"25px\", marginTop: \"20px\" }}\r\n          >\r\n            <FormControl fullWidth sx={{ marginBottom: \"15px\" }}>\r\n              <FormLabel\r\n                sx={{\r\n                  marginBottom: \"10px\",\r\n                  color: \"#000\",\r\n                  fontWeight: 400,\r\n                  fontSize: \"15px\",\r\n                }}\r\n              >\r\n                Enter Your Email Id\r\n              </FormLabel>\r\n              <TextField\r\n                type=\"text\"\r\n                id=\"email\"\r\n                name=\"email\"\r\n                // value={emailLoginData.email || receivedData}\r\n                // onChange={onInputChange}\r\n                size=\"small\"\r\n                // value={receivedData}\r\n                value={\r\n                  receivedData\r\n                    ? (formik.values.email = receivedData)\r\n                    : formik.values.email\r\n                }\r\n                disabled\r\n                readOnly\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                      <EditOutlinedIcon\r\n                        sx={{ cursor: \"pointer\" }}\r\n                        onClick={() => gotoPreviousPageHandler(receivedData)}\r\n                      />\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n            </FormControl>\r\n            <FormControl fullWidth>\r\n              <FormLabel\r\n                sx={{\r\n                  marginTop: \"13px\",\r\n                  marginBottom: \"10px\",\r\n                  color: \"#000\",\r\n                  fontWeight: 400,\r\n                  fontSize: \"15px\",\r\n                }}\r\n              >\r\n                Enter Your Password\r\n              </FormLabel>\r\n              <TextField\r\n                placeholder=\"password\"\r\n                id=\"password\"\r\n                name=\"password\"\r\n                size=\"small\"\r\n                type=\"password\"\r\n                // value={password}\r\n                // value={emailLoginData.password || \"\"}\r\n                // onChange={onInputChange}\r\n                // onChange={(e) => setPassword(e.target.value)}\r\n                value={formik.values.password}\r\n                onBlur={formik.handleBlur}\r\n                onChange={formik.handleChange}\r\n                error={\r\n                  formik.touched.password && Boolean(formik.errors.password)\r\n                }\r\n                helperText={formik.touched.password && formik.errors.password}\r\n              />\r\n            </FormControl>\r\n            <Button\r\n              type=\"submit\"\r\n              sx={{\r\n                mt: 3,\r\n                mb: 2,\r\n                color: \"#111\",\r\n                bgcolor: \"#FFD814\",\r\n                borderColor: \"#FCD200\",\r\n                borderRadius: \"md\",\r\n                textDecoration: \"none\",\r\n                textTransform: \"none\",\r\n                \"&:hover\": {\r\n                  bgcolor: \"#FCD200\",\r\n                },\r\n              }}\r\n              fullWidth\r\n              // onClick={() => handleSubmit()}\r\n            >\r\n              Continue\r\n            </Button>\r\n            <Grid container sx={{ marginBottom: \"8px\" }}>\r\n              <Grid item xs>\r\n                <Link\r\n                  underline=\"none\"\r\n                  variant=\"body1\"\r\n                  sx={{ cursor: \"pointer\" }}\r\n                  onClick={() => navigate(\"/emailpwdrecovery\",{state:receivedData})}\r\n                >\r\n                  Forgot password ?\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </Paper>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default EmailLogin;\r\n"],"names":["STATUS_CODE","METHOD","constructor","isLoggedIn","userData","userToken","this","baseURL","get","url","data","Promise","resolve","reject","api","then","response","catch","error","console","log","post","put","delete","method","axiosConfig","headers","setHeaders","axios","_response$data","status","alert","toast","success","message","_error$response$data","_error$response$data2","err","errData","email","length","concat","phone_number","errors","localStorage","getItem","isMultipart","key","hasOwnProperty","generateValidationSchema","fields","validationRules","forEach","field","name","Yup","min","max","required","mobile_number","matches","relationship","address","first_name","last_name","password","new_password","password_confirmation","API","loginWithEmailInitiate","user","navigate","dispatch","users","type","types","payload","async","createEmailLoginApi","res","token","setItem","createLoginWithEmailIdError","EmailLogin","location","useLocation","useNavigate","useDispatch","receivedData","state","validationSchema","formik","useFormik","initialValues","onSubmit","values","handleSubmit","_jsx","Container","component","maxWidth","sx","margin","children","Box","_jsxs","Paper","elevation","variant","square","marginTop","display","flexDirection","alignItems","bgcolor","Typography","mt","style","padding","FormControl","fullWidth","marginBottom","FormLabel","color","fontWeight","fontSize","TextField","id","size","value","disabled","readOnly","InputProps","endAdornment","InputAdornment","position","EditOutlinedIcon","cursor","onClick","placeholder","onBlur","handleBlur","onChange","handleChange","touched","Boolean","helperText","Button","mb","borderColor","borderRadius","textDecoration","textTransform","Grid","container","item","xs","Link","underline"],"sourceRoot":""}