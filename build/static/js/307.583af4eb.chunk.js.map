{"version":3,"file":"static/js/307.583af4eb.chunk.js","mappings":"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","sources":["API/Constants.js","API/API.js","common/Validations.js","redux/apis/updateUserApi.js","redux/actions/updateUserActions.js","pages/UserAuthentication/UserAccount/UpdateUserAccount.js"],"sourcesContent":["\r\nexport const BASE_URL = \"http://64.227.181.53:3000/\"; // current working url\r\nexport const STATUS_CODE = {\r\n  INTERNAL_SERVER_ERROR: 500,\r\n  SUCCESS: 200,\r\n};\r\n","import axios from \"axios\";\r\nimport { STATUS_CODE, BASE_URL } from \"./Constants\";\r\nimport { toast } from \"react-toastify\";\r\n// Request Methods\r\nconst METHOD = {\r\n  GET: \"get\",\r\n  POST: \"post\",\r\n  PUT: \"put\",\r\n  DELETE: \"delete\",\r\n};\r\n/*\r\n * API controller that for handling the request\r\n */\r\nclass API {\r\n  isLoggedIn = false;\r\n  userData = {};\r\n  userToken = null;\r\n  constructor() {\r\n    this.baseURL = BASE_URL;\r\n  }\r\n  get(url, data) {\r\n    return new Promise((resolve, reject) => {\r\n      this.api(METHOD.GET, url, data)\r\n        .then((response) => {\r\n          resolve(response);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    });\r\n  }\r\n  post(url, data) {\r\n    return new Promise((resolve, reject) => {\r\n      this.api(METHOD.POST, url, data)\r\n        .then((response) => {\r\n          resolve(response);\r\n          // console.log('response',response);\r\n        })\r\n        .catch((error) => {\r\n          // console.log(error);\r\n        });\r\n    });\r\n  }\r\n  put(url, data) {\r\n    return new Promise((resolve, reject) => {\r\n      this.api(METHOD.PUT, url, data)\r\n        .then((response) => {\r\n          resolve(response);\r\n        })\r\n        .catch((error) => {\r\n          // console.log(error);\r\n        });\r\n    });\r\n  }\r\n  delete(url, data) {\r\n    return new Promise((resolve, reject) => {\r\n      this.api(METHOD.DELETE, url, data)\r\n        .then((response) => {\r\n          resolve(response);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    });\r\n  }\r\n  // Main function with hold the axios request param\r\n  api(method, url, data) {\r\n    return new Promise((resolve, reject) => {\r\n      let axiosConfig = {};\r\n      axiosConfig.method = method;\r\n      axiosConfig.url = this.baseURL + url;\r\n      axiosConfig.headers = this.setHeaders(data);\r\n      if (data) {\r\n        // if (data) axiosConfig.params = data;\r\n        if (data) axiosConfig.data = data;\r\n      }\r\n\r\n      axios(axiosConfig)\r\n        .then((response) => {\r\n          if (\r\n            response &&\r\n            response.status === STATUS_CODE.INTERNAL_SERVER_ERROR\r\n          ) {\r\n            alert(\"Something went wrong!!\");\r\n          } else {\r\n            // resolve(response.data);  \r\n            resolve(response);\r\n            if (response) {\r\n              console.log('response', response);\r\n              toast.success(response.data?.message); \r\n            }\r\n          }\r\n          // console.log(\"response\", response);\r\n        })\r\n        .catch((error) => {\r\n          let err = error?.response;\r\n          let errData = error?.response.data;\r\n          console.log(\"ERROR\", error);\r\n          // switch (true) {\r\n          //   case error.response?.data?.email[0] === \"has already been taken\":\r\n          //     toast.error(`Email ${error.response?.data?.email[0]}`);\r\n          //     break;\r\n          //   case error.response.data?.phone_number[0] ===\r\n          //     \"has already been taken\":\r\n          //     toast.error(\r\n          //       `Mobile Number ${error.response?.data?.phone_number[0]}`\r\n          //     );\r\n          //     break;\r\n          //   default:\r\n          //     // Handle other errors if needed\r\n          //     break;\r\n          // }\r\n          // console.log(\"phone_number\", error.response.data?.phone_number[0]);\r\n          // if(\r\n          //   error.response.data?.phone_number[0] === \"has already been taken\"\r\n          // ) {\r\n          //   toast.error(\r\n          //     `Mobile Number ${error.response.data?.phone_number[0]}`\r\n          //   );\r\n          // }\r\n          // if (error.response.data?.email[0] === 'has already been taken') {\r\n          // toast.error(`email ${error.response.data?.email[0]}`);\r\n          // }\r\n          if (\r\n            error.response.data?.email &&\r\n            error.response.data.email.length > 0\r\n          ) {\r\n            toast.error(`Email ${error.response.data.email[0]}`);\r\n          } else if (\r\n            error.response.data?.phone_number &&\r\n            error.response.data.phone_number.length > 0\r\n          ) {\r\n            toast.error(`Mobile Number ${error.response.data.phone_number[0]}`);\r\n          } else if (\r\n            error.response.data.message &&\r\n            error.response.data.message.length > 0\r\n          ) {\r\n            toast.error(`${error.response.data.message}`);\r\n          } else if(err?.status===401){\r\n            toast.error(`${errData.errors}`);\r\n          } else {\r\n            toast.error(\"An error occurred\");\r\n          }\r\n          //DEFAULT ERROR HANDLING\r\n        });\r\n    });\r\n  }\r\n  // Set the header for request\r\n  setHeaders(data) {\r\n    let headers = {};\r\n    headers[\"accept-language\"] = \"en\";\r\n    headers[\"Content-Type\"] = \"application/json\";\r\n    headers[\"Accept\"] = \"application/json\";\r\n    headers[\"Authorization\"] = localStorage.getItem(\"token\");\r\n    if (data) {\r\n      if (data.isMultipart) {\r\n        headers[\"Content-Type\"] = \"multipart/form-data\";\r\n      }\r\n      if (data.headers) {\r\n        for (var key in data.headers) {\r\n          if (data.headers.hasOwnProperty(key)) {\r\n            headers[key] = data.headers[key];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return headers;\r\n  }\r\n}\r\nexport default API;\r\n","import * as Yup from \"yup\";\r\nconst generateValidationSchema = (fields) => {\r\n  const validationRules = {};\r\n  fields.forEach((field) => {\r\n    switch (field) {\r\n      case \"name\":\r\n        validationRules.name = Yup.string()\r\n          .min(2, \"Name is Short!\")\r\n          .max(50, \"Name is Long!\")\r\n          .required(\"Name is required\");\r\n        break;\r\n      case \"email\":\r\n        validationRules.email = Yup.string()\r\n          .email(\"Invalid email address format\")\r\n          .required(\"Email is required\");\r\n        break;\r\n      case \"mobile_number\":\r\n        validationRules.mobile_number = Yup.string()\r\n          .required(\"Mobile Number is required\")\r\n          .matches(/^[6-9][0-9]{9}$/, \"Invalid Mobile Number\");\r\n        break;\r\n      case \"phone_number\":\r\n        validationRules.phone_number = Yup.string()\r\n          .required(\"Phone Number is required\")\r\n          .matches(/^[6-9][0-9]{9}$/, \"Invalid Phone Number\");\r\n        break;\r\n      case \"relationship\":\r\n        validationRules.relationship = Yup.string()\r\n          .min(3, \"Relationship is Short!\")\r\n          .max(50, \"Relationship is Long!\")\r\n          .required(\"Relationship is required\");\r\n        break;\r\n      case \"address\":\r\n        validationRules.address = Yup.string()\r\n          .min(5, \"Address is Short!\")\r\n          .max(100, \"Address is Long!\")\r\n          .required(\"Address is required\");\r\n        break;\r\n      case \"first_name\":\r\n        validationRules.first_name = Yup.string()\r\n          .min(2, \"First Name is Short!\")\r\n          .max(50, \"First Name is Long!\")\r\n          .required(\"First Name is required\");\r\n        break;\r\n      case \"last_name\":\r\n        validationRules.last_name = Yup.string()\r\n          .min(2, \"Last Name is Short!\")\r\n          .max(50, \"Last Name is Long!\")\r\n          .required(\"Last Name is required\");\r\n        break;\r\n      case \"password\":\r\n        validationRules.password = Yup.string()\r\n          .min(8, \"Password should be at least 8 characters\")\r\n          .required(\"Password is required\");\r\n        // .validateSync(value, { abortEarly: false }) || \"\";\r\n        break;\r\n      case \"new_password\":\r\n        validationRules.new_password = Yup.string()\r\n          .min(8, \"New Password should be at least 8 characters\")\r\n          .required(\"New Password is required\");\r\n        // .validateSync(value, { abortEarly: false }) || \"\";\r\n        break;\r\n      case \"password_confirmation\":\r\n        validationRules.password_confirmation = Yup.string()\r\n          .min(8, \"Password should be at least 8 characters\")\r\n          .required(\"Confirm Password is required\");\r\n        // .validateSync(value, { abortEarly: false }) || \"\";\r\n        break;\r\n\r\n      // Add additional fields as needed\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n \r\n  return Yup.object(validationRules);\r\n};\r\n \r\nconst initialValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  mobile_number: \"\",\r\n  relationship: \"\",\r\n  address: \"\",\r\n  first_name: \"\",\r\n  password: \"\",\r\n  password_confirmation: \"\"\r\n  \r\n};\r\n \r\nexport { initialValues, generateValidationSchema };","import API from \"../../API/API.js\";\r\nconst api = new API();\r\nconst endPoints = \"accounts\";\r\nexport const updateUserAccountApi = async (userId,user) => {\r\n  console.log(\"userId,user in api\", userId, user);\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n       const result = await api.put(`${endPoints}/${userId}`, user);\r\n       console.log(\"result updatefamily api\", result.data);\r\n        resolve(result);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n","import * as types from \"./actionTypes\";\r\nimport { updateUserAccountApi } from \"../apis/updateUserApi\";\r\n//post signup with email id\r\nexport const updateUserStart = (userId, user) =>\r\n  // console.log('users', users),\r\n  ({\r\n    type: types.UPDATE_USER_START,\r\n    payload: [userId, user],\r\n  });\r\nexport const updateUserSuccess = () => ({\r\n  type: types.UPDATE_USER_SUCCESS,\r\n});\r\nexport const updateUserError = (error) => ({\r\n  type: types.UPDATE_USER_ERROR,\r\n  payload: error,\r\n});\r\nexport const updateUserInitiate = (userId,user, navigate) => {\r\n  return function (dispatch) {\r\n    dispatch(updateUserStart(userId,user));\r\n    updateUserAccountApi(userId,user)\r\n      .then((res) => {\r\n        // let userData = res?.data;\r\n        console.log(res);\r\n        dispatch(updateUserSuccess(res));\r\n        if (res.status === 200) {\r\n            navigate(\"/login\",);\r\n        }\r\n      })\r\n      .catch((error) => dispatch(updateUserError(error.message)));\r\n  };\r\n};\r\nexport default {\r\n  updateUserInitiate,\r\n};\r\n\r\n","import React, { useState } from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Link from \"@mui/material/Link\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Container from \"@mui/material/Container\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\r\nimport { FormLabel,TextField } from \"@mui/material\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport EditOutlinedIcon from \"@mui/icons-material/EditOutlined\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport PhoneInput from \"react-phone-number-input\";\r\nimport \"react-phone-number-input/style.css\";\r\nimport { useFormik } from \"formik\";\r\nimport {\r\n  initialValues,\r\n  generateValidationSchema,\r\n} from \"../../../common/Validations\";\r\nimport { updateUserInitiate } from \"../../../redux/actions/updateUserActions\";\r\nimport \"./CustomPhoneInput.css\"; \r\nconst UpdateUserAccount = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const receivedData = location?.state;\r\n  let userId = receivedData?.id;\r\n  // console.log(\"receivedData\", receivedData);\r\n  // const [value, setValue] = useState({});\r\n  const handleSubmit = async (values,resetForm) => {\r\n    console.log(\"values\", values);\r\n    try {\r\n      // Make the API call directly in the component\r\n      dispatch(updateUserInitiate(userId, values, navigate));\r\n       resetForm();\r\n      // navigate(\"/otp/otpverify\", { state: formik.values.email });\r\n      // Dispatch the success action\r\n      // dispatch(createSignupWithEmailIdSuccess(result));\r\n    } catch (error) {\r\n      // Dispatch the error action\r\n      // dispatch(createSignupWithEmailIdError(error));\r\n    }\r\n  };\r\n  const formFields = [\r\n    \"first_name\",\r\n    \"last_name\",\r\n    \"phone_number\",\r\n    \"email\",\r\n    \"password\",\r\n    \"password_confirmation\",\r\n  ];\r\n  const validationSchema = generateValidationSchema(formFields);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      first_name: \"\",\r\n      last_name: \"\",\r\n      phone_number: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      password_confirmation: \"\",\r\n    },\r\n    validationSchema: validationSchema,\r\n    onSubmit: (values) => handleSubmit(values),\r\n  });\r\n  return (\r\n    <>\r\n      <Container\r\n        component=\"main\"\r\n        maxWidth=\"sm\"\r\n        sx={{\r\n          margin: \"auto\",\r\n        }}\r\n      >\r\n        <Box>\r\n          <Paper\r\n            elevation={1}\r\n            variant=\"elevation\"\r\n            square={false}\r\n            sx={{\r\n              marginTop: 8,\r\n              padding: \"20px\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n              bgcolor: \"#fff\",\r\n            }}\r\n          >\r\n            <Typography variant=\"h5\">Create Your Account</Typography>\r\n            <Box\r\n              component=\"form\"\r\n              onSubmit={formik.handleSubmit}\r\n              // onSubmit={handleSubmit}\r\n              // noValidate\r\n              sx={{ mt: 1, padding: \"25px\" }}\r\n            >\r\n              <FormControl fullWidth sx={{ marginBottom: \"10px\" }}>\r\n                <FormLabel\r\n                  sx={{\r\n                    marginBottom: \"5px\",\r\n                    color: \"#000\",\r\n                    fontWeight: 400,\r\n                    fontSize: \"15px\",\r\n                  }}\r\n                >\r\n                  Your First Name\r\n                </FormLabel>\r\n                <TextField\r\n                  type=\"text\"\r\n                  id=\"first_name\"\r\n                  name=\"first_name\"\r\n                  size=\"small\"\r\n                  value={formik.values.first_name}\r\n                  onBlur={formik.handleBlur}\r\n                  onChange={formik.handleChange}\r\n                  error={\r\n                    formik.touched.first_name &&\r\n                    Boolean(formik.errors.first_name)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.first_name && formik.errors.first_name\r\n                  }\r\n                />\r\n              </FormControl>\r\n              <FormControl fullWidth sx={{ marginBottom: \"10px\" }}>\r\n                <FormLabel\r\n                  sx={{\r\n                    marginBottom: \"5px\",\r\n                    color: \"#000\",\r\n                    fontWeight: 400,\r\n                    fontSize: \"15px\",\r\n                  }}\r\n                >\r\n                  Your Last Name\r\n                </FormLabel>\r\n                <TextField\r\n                  type=\"text\"\r\n                  id=\"last_name\"\r\n                  name=\"last_name\"\r\n                  size=\"small\"\r\n                  value={formik.values.last_name}\r\n                  onBlur={formik.handleBlur}\r\n                  onChange={formik.handleChange}\r\n                  error={\r\n                    formik.touched.last_name && Boolean(formik.errors.last_name)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.last_name && formik.errors.last_name\r\n                  }\r\n                />\r\n              </FormControl>\r\n              <FormControl fullWidth sx={{ marginBottom: \"10px\" }}>\r\n                <FormLabel\r\n                  sx={{\r\n                    marginBottom: \"5px\",\r\n                    color: \"#000\",\r\n                    fontWeight: 400,\r\n                    fontSize: \"15px\",\r\n                  }}\r\n                >\r\n                  Mobile Number\r\n                </FormLabel>\r\n                {/* <PhoneInput\r\n                  // placeholder=\"Enter phone number\"\r\n                  defaultCountry=\"IN\"\r\n                  // value={value}\r\n                  // onChange={setValue}\r\n                  style={{\r\n                    border: \"1px solid #ccc\",\r\n                    borderRadius: \"4px\",\r\n                    // padding: \"2px\",\r\n                  }}\r\n                  value={formik.values.phone_number}\r\n                  onBlur={formik.handleBlur}\r\n                  onChange={formik.handleChange}\r\n                  error={\r\n                    formik.touched.phone_number &&\r\n                    Boolean(formik.errors.phone_number)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.phone_number && formik.errors.phone_number\r\n                  }\r\n                /> */}\r\n                <TextField\r\n                  type=\"text\"\r\n                  id=\"phone_number\"\r\n                  name=\"phone_number\"\r\n                  size=\"small\"\r\n                  disabled={receivedData?.phone_number ? true : false}\r\n                  value={\r\n                    receivedData?.phone_number\r\n                      ? (formik.values.phone_number =\r\n                          receivedData?.phone_number)\r\n                      : formik.values.phone_number\r\n                  }\r\n                  // value={formik.values.phone_number}\r\n                  onBlur={formik.handleBlur}\r\n                  onChange={formik.handleChange}\r\n                  error={\r\n                    formik.touched.phone_number &&\r\n                    Boolean(formik.errors.phone_number)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.phone_number && formik.errors.phone_number\r\n                  }\r\n                />\r\n              </FormControl>\r\n              <FormControl fullWidth sx={{ marginBottom: \"10px\" }}>\r\n                <FormLabel\r\n                  sx={{\r\n                    marginBottom: \"5px\",\r\n                    color: \"#000\",\r\n                    fontWeight: 400,\r\n                    fontSize: \"15px\",\r\n                  }}\r\n                >\r\n                  Your Email Id\r\n                </FormLabel>\r\n                <TextField\r\n                  type=\"email\"\r\n                  id=\"email\"\r\n                  name=\"email\"\r\n                  size=\"small\"\r\n                  // value={receivedData.email}\r\n                  disabled={receivedData?.email ? true : false}\r\n                  // readOnly\r\n                  value={\r\n                    receivedData?.email\r\n                      ? (formik.values.email = receivedData?.email)\r\n                      : formik.values.email\r\n                  }\r\n                  // value={formik.values.email}\r\n                  onBlur={formik.handleBlur}\r\n                  onChange={formik.handleChange}\r\n                  error={\r\n                    formik.touched.email && Boolean(formik.errors.email)\r\n                  }\r\n                  helperText={formik.touched.email && formik.errors.email}\r\n                />\r\n              </FormControl>\r\n              <FormControl fullWidth sx={{ marginBottom: \"10px\" }}>\r\n                <FormLabel\r\n                  sx={{\r\n                    marginBottom: \"5px\",\r\n                    color: \"#000\",\r\n                    fontWeight: 400,\r\n                    fontSize: \"15px\",\r\n                  }}\r\n                >\r\n                  Password\r\n                </FormLabel>\r\n                <TextField\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  name=\"password\"\r\n                  size=\"small\"\r\n                  value={formik.values.password}\r\n                  onBlur={formik.handleBlur}\r\n                  onChange={formik.handleChange}\r\n                  error={\r\n                    formik.touched.password && Boolean(formik.errors.password)\r\n                  }\r\n                  helperText={formik.touched.password && formik.errors.password}\r\n                />\r\n              </FormControl>\r\n              <FormControl fullWidth sx={{ marginBottom: \"10px\" }}>\r\n                <FormLabel\r\n                  sx={{\r\n                    marginBottom: \"5px\",\r\n                    color: \"#000\",\r\n                    fontWeight: 400,\r\n                    fontSize: \"15px\",\r\n                  }}\r\n                >\r\n                  Confirm Password\r\n                </FormLabel>\r\n                <TextField\r\n                  type=\"password\"\r\n                  id=\"password_confirmation\"\r\n                  name=\"password_confirmation\"\r\n                  size=\"small\"\r\n                  value={formik.values.password_confirmation}\r\n                  onBlur={formik.handleBlur}\r\n                  onChange={formik.handleChange}\r\n                  error={\r\n                    formik.touched.password_confirmation &&\r\n                    Boolean(formik.errors.password_confirmation)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.password_confirmation &&\r\n                    formik.errors.password_confirmation\r\n                  }\r\n                />\r\n              </FormControl>\r\n              {/* <FormControl fullWidth>\r\n                <FormLabel\r\n                  sx={{\r\n                    marginTop: \"13px\",\r\n                    marginBottom: \"10px\",\r\n                    color: \"#000\",\r\n                    fontWeight: 400,\r\n                    fontSize: \"15px\",\r\n                  }}\r\n                >\r\n                  Enter Your Password\r\n                </FormLabel>\r\n                <OutlinedInput\r\n                  placeholder=\"password\"\r\n                  id=\"password\"\r\n                  name=\"password\"\r\n                  size=\"small\"\r\n                  type=\"password\"\r\n                  // value={password}\r\n                  // value={emailLoginData.password || \"\"}\r\n                  // onChange={onInputChange}\r\n                  // onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n              </FormControl> */}\r\n              <Button\r\n                type=\"submit\"\r\n                sx={{\r\n                  mt: 3,\r\n                  mb: 2,\r\n                  color: \"#111\",\r\n                  bgcolor: \"#FFD814\",\r\n                  borderColor: \"#FCD200\",\r\n                  borderRadius: \"md\",\r\n                  textDecoration: \"none\",\r\n                  textTransform: \"none\",\r\n                  \"&:hover\": {\r\n                    bgcolor: \"#FCD200\",\r\n                  },\r\n                }}\r\n                fullWidth\r\n                // onClick={() => handleSubmit()}\r\n              >\r\n                Continue\r\n              </Button>\r\n              {/* <Grid container sx={{ marginBottom: \"8px\" }}>\r\n                <Grid item xs>\r\n                  <Link href=\"#\" variant=\"body2\">\r\n                    Forgot password?\r\n                  </Link>\r\n                </Grid>\r\n              </Grid> */}\r\n            </Box>\r\n          </Paper>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateUserAccount;"],"names":["STATUS_CODE","METHOD","constructor","isLoggedIn","userData","userToken","this","baseURL","get","url","data","Promise","resolve","reject","api","then","response","catch","error","console","log","post","put","delete","method","axiosConfig","headers","setHeaders","axios","_response$data","status","alert","toast","success","message","_error$response$data","_error$response$data2","err","errData","email","length","concat","phone_number","errors","localStorage","getItem","isMultipart","key","hasOwnProperty","generateValidationSchema","fields","validationRules","forEach","field","name","Yup","min","max","required","mobile_number","matches","relationship","address","first_name","last_name","password","new_password","password_confirmation","API","updateUserInitiate","userId","user","navigate","dispatch","updateUserStart","type","types","payload","async","result","updateUserAccountApi","res","updateUserError","UpdateUserAccount","location","useLocation","useNavigate","useDispatch","receivedData","state","id","validationSchema","formik","useFormik","initialValues","onSubmit","values","resetForm","handleSubmit","_jsx","_Fragment","children","Container","component","maxWidth","sx","margin","Box","_jsxs","Paper","elevation","variant","square","marginTop","padding","display","flexDirection","alignItems","bgcolor","Typography","mt","FormControl","fullWidth","marginBottom","FormLabel","color","fontWeight","fontSize","TextField","size","value","onBlur","handleBlur","onChange","handleChange","touched","Boolean","helperText","disabled","Button","mb","borderColor","borderRadius","textDecoration","textTransform"],"sourceRoot":""}