{"version":3,"file":"static/js/382.196ef786.chunk.js","mappings":"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","sources":["API/Constants.js","API/API.js","common/Validations.js","redux/apis/updatePasswordApi.js","redux/actions/updatePasswordActions.js","pages/UserAuthentication/PasswordManagement/UpdatePassword/UpdatePassword.js"],"sourcesContent":["\r\n// export const BASE_URL = \"http://64.227.181.53:3000/\"; // past working url\r\nexport const BASE_URL = \"http://206.189.133.111:3000/\"; // current working url\r\nexport const STATUS_CODE = {\r\n  INTERNAL_SERVER_ERROR: 500,\r\n  SUCCESS: 200,\r\n};\r\n","import axios from \"axios\";\r\nimport { STATUS_CODE, BASE_URL } from \"./Constants\";\r\nimport { toast } from \"react-toastify\";\r\nimport { WindowSharp } from \"@mui/icons-material\";\r\n// Request Methods\r\nconst METHOD = {\r\n  GET: \"get\",\r\n  POST: \"post\",\r\n  PUT: \"put\",\r\n  DELETE: \"delete\",\r\n};\r\n/*\r\n * API controller that for handling the request\r\n */\r\nclass API {\r\n  isLoggedIn = false;\r\n  userData = {};\r\n  userToken = null;\r\n  constructor() {\r\n    this.baseURL = BASE_URL;\r\n  }\r\n  get(url, data) {\r\n    return new Promise((resolve, reject) => {\r\n      this.api(METHOD.GET, url, data)\r\n        .then((response) => {\r\n          resolve(response);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    });\r\n  }\r\n  post(url, data) {\r\n    return new Promise((resolve, reject) => {\r\n      this.api(METHOD.POST, url, data)\r\n        .then((response) => {\r\n          resolve(response);\r\n          // console.log('response',response);\r\n        })\r\n        .catch((error) => {\r\n          // console.log(error);\r\n        });\r\n    });\r\n  }\r\n  put(url, data) {\r\n    return new Promise((resolve, reject) => {\r\n      this.api(METHOD.PUT, url, data)\r\n        .then((response) => {\r\n          resolve(response);\r\n        })\r\n        .catch((error) => {\r\n          // console.log(error);\r\n        });\r\n    });\r\n  }\r\n  delete(url, data) {\r\n    return new Promise((resolve, reject) => {\r\n      this.api(METHOD.DELETE, url, data)\r\n        .then((response) => {\r\n          resolve(response);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    });\r\n  }\r\n  // Main function with hold the axios request param\r\n  api(method, url, data) {\r\n    return new Promise((resolve, reject) => {\r\n      let axiosConfig = {};\r\n      axiosConfig.method = method;\r\n      axiosConfig.url = this.baseURL + url;\r\n      axiosConfig.headers = this.setHeaders(data);\r\n      //  console.log(\"axiosConfig.headers\", axiosConfig.headers);\r\n      if (data) {\r\n        // if (data) axiosConfig.params = data;\r\n        if (data) axiosConfig.data = data;\r\n      }\r\n\r\n      axios(axiosConfig)\r\n        .then((response) => {\r\n          if (\r\n            response &&\r\n            response.status === STATUS_CODE.INTERNAL_SERVER_ERROR\r\n          ) {\r\n            toast.error(\"Something went wrong!!\");\r\n          } else {\r\n            // resolve(response.data);  \r\n            resolve(response);\r\n            if (response) {\r\n              // console.log('response', response);\r\n              toast.success(response.data?.messages); \r\n            }\r\n            // else if (response.status === 200) {\r\n            //   toast.success(response.data?.message); \r\n            // }\r\n            // else {\r\n            //   toast.success(\"Something went wrong\"); \r\n            // }\r\n          }\r\n          // console.log(\"response\", response);\r\n        })\r\n        .catch((error) => {\r\n          let err = error?.response;\r\n          let errData = error?.response.data;\r\n          console.log(\"ERROR\", error);\r\n          // switch (true) {\r\n          //   case error.response?.data?.email[0] === \"has already been taken\":\r\n          //     toast.error(`Email ${error.response?.data?.email[0]}`);\r\n          //     break;\r\n          //   case error.response.data?.phone_number[0] ===\r\n          //     \"has already been taken\":\r\n          //     toast.error(\r\n          //       `Mobile Number ${error.response?.data?.phone_number[0]}`\r\n          //     );\r\n          //     break;\r\n          //   default:\r\n          //     // Handle other errors if needed\r\n          //     break;\r\n          // }\r\n          // console.log(\"phone_number\", error.response.data?.phone_number[0]);\r\n          // if(\r\n          //   error.response.data?.phone_number[0] === \"has already been taken\"\r\n          // ) {\r\n          //   toast.error(\r\n          //     `Mobile Number ${error.response.data?.phone_number[0]}`\r\n          //   );\r\n          // }\r\n          // if (error.response.data?.email[0] === 'has already been taken') {\r\n          // toast.error(`email ${error.response.data?.email[0]}`);\r\n          // }\r\n          if (\r\n            error.response.data?.email &&\r\n            error.response.data.email.length > 0\r\n          ) {\r\n            toast.error(`Email ${error.response.data.email[0]}`);\r\n          } else if (\r\n            error.response.data?.phone_number &&\r\n            error.response.data.phone_number.length > 0\r\n          ) {\r\n            toast.error(`Mobile Number ${error.response.data.phone_number[0]}`);\r\n          } else if (\r\n            error.response.data.message &&\r\n            error.response.data.message.length > 0\r\n          ) {\r\n            toast.error(`${error.response.data.message}`);\r\n          } else if(err?.status===401){\r\n            toast.error(`${errData.errors}`);\r\n          } else if (err?.status === 422) {\r\n            toast.error(`${error.response.data.errors}`);\r\n          }else {\r\n            toast.error(\"An error occurred\");\r\n          }\r\n          //DEFAULT ERROR HANDLING\r\n        });\r\n    });\r\n  }\r\n  // Set the header for request\r\n  setHeaders(data) {\r\n    let headers = {};\r\n    headers[\"accept-language\"] = \"en\";\r\n    headers[\"Content-Type\"] = \"application/json\";\r\n    headers[\"Accept\"] = \"application/json\";\r\n    headers[\"Authorization\"] = localStorage.getItem(\"token\");\r\n    if (data) {\r\n      if (data.isMultipart) {\r\n        headers[\"Content-Type\"] = \"multipart/form-data\";\r\n      }\r\n      if (data.headers) {\r\n        for (var key in data.headers) {\r\n          if (data.headers.hasOwnProperty(key)) {\r\n            headers[key] = data.headers[key];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return headers;\r\n  }\r\n}\r\nexport default API;\r\n","import * as Yup from \"yup\";\r\nconst generateValidationSchema = (fields) => {\r\n  const validationRules = {};\r\n  fields.forEach((field) => {\r\n    switch (field) {\r\n      case \"name\":\r\n        validationRules.name = Yup.string()\r\n          .min(2, \"Name is Short!\")\r\n          .max(50, \"Name is Long!\")\r\n          .required(\"Name is required\");\r\n        break;\r\n      case \"email\":\r\n        validationRules.email = Yup.string()\r\n          .email(\"Invalid email address format\")\r\n          .required(\"Email is required\");\r\n        break;\r\n      case \"mobile_number\":\r\n        validationRules.mobile_number = Yup.string()\r\n          .required(\"Mobile Number is required\")\r\n          .matches(/^[6-9][0-9]{9}$/, \"Invalid Mobile Number\");\r\n        break;\r\n      case \"phone_number\":\r\n        validationRules.phone_number = Yup.string()\r\n          .required(\"Phone Number is required\")\r\n          .matches(/^[6-9][0-9]{9}$/, \"Invalid Phone Number\");\r\n        break;\r\n      case \"relationship\":\r\n        validationRules.relationship = Yup.string()\r\n          .min(3, \"Relationship is Short!\")\r\n          .max(50, \"Relationship is Long!\")\r\n          .required(\"Relationship is required\");\r\n        break;\r\n      case \"address\":\r\n        validationRules.address = Yup.string()\r\n          .min(5, \"Address is Short!\")\r\n          .max(100, \"Address is Long!\")\r\n          .required(\"Address is required\");\r\n        break;\r\n      case \"first_name\":\r\n        validationRules.first_name = Yup.string()\r\n          .min(2, \"First Name is Short!\")\r\n          .max(50, \"First Name is Long!\")\r\n          .required(\"First Name is required\");\r\n        break;\r\n      case \"last_name\":\r\n        validationRules.last_name = Yup.string()\r\n          .min(2, \"Last Name is Short!\")\r\n          .max(50, \"Last Name is Long!\")\r\n          .required(\"Last Name is required\");\r\n        break;\r\n      case \"password\":\r\n        validationRules.password = Yup.string()\r\n          .min(8, \"Password should be at least 8 characters\")\r\n          .required(\"Password is required\");\r\n        // .validateSync(value, { abortEarly: false }) || \"\";\r\n        break;\r\n      case \"old_password\":\r\n        validationRules.old_password = Yup.string()\r\n          .min(8, \"Current Password should be at least 8 characters\")\r\n          .required(\"Current Password is required\");\r\n        // .validateSync(value, { abortEarly: false }) || \"\";\r\n        break;\r\n      case \"new_password\":\r\n        validationRules.new_password = Yup.string()\r\n          .min(8, \"New Password should be at least 8 characters\")\r\n          .required(\"New Password is required\");\r\n        // .validateSync(value, { abortEarly: false }) || \"\";\r\n        break;\r\n      case \"password_confirmation\":\r\n        validationRules.password_confirmation = Yup.string()\r\n          .min(8, \"Password should be at least 8 characters\")\r\n          .required(\"Confirm Password is required\");\r\n        // .validateSync(value, { abortEarly: false }) || \"\";\r\n        break;\r\n      case \"confirm_password\":\r\n        validationRules.confirm_password = Yup.string()\r\n          .min(8, \"Confirm Password should be at least 8 characters\")\r\n          .required(\"Confirm Password is required\");\r\n        // .validateSync(value, { abortEarly: false }) || \"\";\r\n        break;\r\n      case \"input\":\r\n        validationRules.input = Yup.string()\r\n          .required(\"Input is required\");\r\n        // .validateSync(value, { abortEarly: false }) || \"\";\r\n        break;\r\n\r\n      // Add additional fields as needed\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n \r\n  return Yup.object(validationRules);\r\n};\r\n \r\nconst initialValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  mobile_number: \"\",\r\n  relationship: \"\",\r\n  address: \"\",\r\n  first_name: \"\",\r\n  password: \"\",\r\n  password_confirmation: \"\",\r\n  input:\"\",\r\n};\r\n \r\nexport { initialValues, generateValidationSchema };","import API from \"../../API/API.js\";\r\nconst api = new API();\r\nconst endPoints = \"/accounts/reset_password_with_old_password\";\r\nexport const createUpdatePasswordApi = async (users) => {\r\n  // console.log('users in api', users);\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const result = await api.post(`${endPoints}`, users);\r\n      console.log(\"result in api\", result);\r\n      resolve(result);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n","import * as types from \"./actionTypes\";\r\nimport { createUpdatePasswordApi } from \"../apis/updatePasswordApi\";\r\n// resend otp actions details\r\nexport const createUpdatePasswordStart = (users) =>\r\n  // console.log('users', users),\r\n  ({\r\n    type: types.UPDATE_PASSWORD_START,\r\n    payload: users,\r\n  });\r\nexport const createUpdatePasswordSuccess = () => ({\r\n  type: types.UPDATE_PASSWORD_SUCCESS,\r\n});\r\nexport const createUpdatePasswordError = (error) => ({\r\n  type: types.UPDATE_PASSWORD_ERROR,\r\n  payload: error,\r\n});\r\nexport const createUpdatePasswordInitiate = (user, navigate) => {\r\n  return function (dispatch) {\r\n    dispatch(createUpdatePasswordStart(user));\r\n    createUpdatePasswordApi(user)\r\n      .then((res) => {\r\n        console.log('res',res);\r\n        dispatch(createUpdatePasswordSuccess(res));\r\n        if (res.status === 200) {\r\n          navigate(\"/welcomepage\");\r\n        }\r\n      })\r\n      .catch((error) => dispatch(createUpdatePasswordError(error.message)));\r\n  };\r\n};\r\nexport default {\r\n  createUpdatePasswordInitiate,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Link from \"@mui/material/Link\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Container from \"@mui/material/Container\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\r\nimport { FormLabel } from \"@mui/material\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport EditOutlinedIcon from \"@mui/icons-material/EditOutlined\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { useFormik } from \"formik\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { createUpdatePasswordInitiate } from \"../../../../redux/actions/updatePasswordActions\";\r\nimport {\r\n  initialValues,\r\n  generateValidationSchema,\r\n} from \"../../../../common/Validations\";\r\nconst UpdatePassword = () => {\r\n  // Use the credential value as needed in your component\r\n  //  console.log(\"data:\", data);\r\n  //  console.log(\"Email:\", credential);\r\n\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  // const receivedData = location?.state;\r\n  // console.log(\"receivedData\", receivedData);\r\n  // const [emailLoginData, setEmailLoginData] = useState({\r\n  //   email: receivedData,\r\n  //   email: \"\",\r\n  //   type: \"email_account\",\r\n  // });\r\n\r\n  // const onInputChange = (e) => {\r\n  //   // console.log(\"emailLoginData\", emailLoginData);\r\n  //   let { name, value } = e.target;\r\n  //   setEmailLoginData({ ...emailLoginData, [name]: value });\r\n  // };\r\n  const handleSubmit = async (values) => {\r\n    console.log(\"update password \", values);\r\n    try {\r\n      dispatch(createUpdatePasswordInitiate(values, navigate));\r\n    } catch (error) {}\r\n  };\r\n  const formFields = [\"old_password\", \"password\", \"confirm_password\"];\r\n  const validationSchema = generateValidationSchema(formFields);\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      old_password: \"\",\r\n      password: \"\",\r\n      confirm_password:\"\",\r\n      // account_id: receivedData?.id,\r\n    },\r\n    validationSchema: validationSchema,\r\n    onSubmit: (values) => handleSubmit(values),\r\n  });\r\n  return (\r\n    <Container\r\n      component=\"main\"\r\n      maxWidth=\"xs\"\r\n      sx={{\r\n        margin: \"auto\",\r\n      }}\r\n    >\r\n      <Box>\r\n        <Paper\r\n          elevation={1}\r\n          variant=\"elevation\"\r\n          square={false}\r\n          sx={{\r\n            marginTop: 8,\r\n            // padding: \"20px\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            bgcolor: \"#fff\",\r\n          }}\r\n        >\r\n          <Typography component=\"h1\" variant=\"h5\" mt={2}>\r\n            Update Password\r\n          </Typography>\r\n          <form\r\n            onSubmit={formik.handleSubmit}\r\n            component=\"form\"\r\n            style={{ padding: \"25px\", marginTop: \"20px\" }}\r\n          >\r\n            <FormControl fullWidth >\r\n              <FormLabel\r\n                sx={{\r\n                  marginBottom: \"10px\",\r\n                  color: \"#000\",\r\n                  fontWeight: 400,\r\n                  fontSize: \"15px\",\r\n                }}\r\n              >\r\n                Current Password\r\n              </FormLabel>\r\n              <TextField\r\n                placeholder=\"current password\"\r\n                type=\"password\"\r\n                id=\"old_password\"\r\n                name=\"old_password\"\r\n                size=\"small\"\r\n                value={formik.values.old_password}\r\n                onBlur={formik.handleBlur}\r\n                onChange={formik.handleChange}\r\n                error={\r\n                  formik.touched.old_password && Boolean(formik.errors.old_password)\r\n                }\r\n                helperText={formik.touched.old_password && formik.errors.old_password}\r\n              />\r\n            </FormControl>\r\n            <FormControl fullWidth>\r\n              <FormLabel\r\n                sx={{\r\n                  marginTop: \"13px\",\r\n                  marginBottom: \"10px\",\r\n                  color: \"#000\",\r\n                  fontWeight: 400,\r\n                  fontSize: \"15px\",\r\n                }}\r\n              >\r\n               New Password \r\n              </FormLabel>\r\n              <TextField\r\n                placeholder=\"new password\"\r\n                id=\"password\"\r\n                name=\"password\"\r\n                size=\"small\"\r\n                type=\"password\"\r\n                value={formik.values.password}\r\n                onBlur={formik.handleBlur}\r\n                onChange={formik.handleChange}\r\n                error={\r\n                  formik.touched.password &&\r\n                  Boolean(formik.errors.password)\r\n                }\r\n                helperText={\r\n                  formik.touched.password && formik.errors.password\r\n                }\r\n              />\r\n            </FormControl>\r\n            <FormControl fullWidth>\r\n              <FormLabel\r\n                sx={{\r\n                  marginTop: \"13px\",\r\n                  marginBottom: \"10px\",\r\n                  color: \"#000\",\r\n                  fontWeight: 400,\r\n                  fontSize: \"15px\",\r\n                }}\r\n              >\r\n                Password Again\r\n              </FormLabel>\r\n              <TextField\r\n                placeholder=\"confirm password\"\r\n                id=\"confirm_password\"\r\n                name=\"confirm_password\"\r\n                size=\"small\"\r\n                type=\"password\"\r\n                value={formik.values.confirm_password}\r\n                onBlur={formik.handleBlur}\r\n                onChange={formik.handleChange}\r\n                error={\r\n                  formik.touched.confirm_password &&\r\n                  Boolean(formik.errors.confirm_password)\r\n                }\r\n                helperText={\r\n                  formik.touched.confirm_password && formik.errors.confirm_password\r\n                }\r\n              />\r\n            </FormControl>\r\n            <Button\r\n              type=\"submit\"\r\n              sx={{\r\n                mt: 3,\r\n                mb: 2,\r\n                color: \"#111\",\r\n                bgcolor: \"#FFD814\",\r\n                borderColor: \"#FCD200\",\r\n                borderRadius: \"md\",\r\n                textDecoration: \"none\",\r\n                textTransform: \"none\",\r\n                \"&:hover\": {\r\n                  bgcolor: \"#FCD200\",\r\n                },\r\n              }}\r\n              fullWidth\r\n            >\r\n              Save & Sign\r\n            </Button>\r\n            {/* <Grid container sx={{ marginBottom: \"8px\" }}>\r\n              <Grid item xs>\r\n                <Link\r\n                  underline=\"none\"\r\n                  variant=\"body1\"\r\n                  sx={{ cursor: \"pointer\" }}\r\n                  onClick={() =>\r\n                    navigate(\"/mobilepwdrecovery\", { state: receivedData })\r\n                  }\r\n                >\r\n                  Forgot password ?\r\n                </Link>\r\n              </Grid>\r\n            </Grid> */}\r\n          </form>\r\n        </Paper>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UpdatePassword;\r\n"],"names":["STATUS_CODE","METHOD","constructor","isLoggedIn","userData","userToken","this","baseURL","get","url","data","Promise","resolve","reject","api","then","response","catch","error","console","log","post","put","delete","method","axiosConfig","headers","setHeaders","axios","_response$data","status","toast","success","messages","_error$response$data","_error$response$data2","err","errData","email","length","concat","phone_number","message","errors","localStorage","getItem","isMultipart","key","hasOwnProperty","generateValidationSchema","fields","validationRules","forEach","field","name","Yup","min","max","required","mobile_number","matches","relationship","address","first_name","last_name","password","old_password","new_password","password_confirmation","confirm_password","input","API","createUpdatePasswordInitiate","user","navigate","dispatch","users","type","types","payload","async","result","createUpdatePasswordApi","res","createUpdatePasswordError","UpdatePassword","useLocation","useNavigate","useDispatch","validationSchema","formik","useFormik","initialValues","onSubmit","values","handleSubmit","_jsx","Container","component","maxWidth","sx","margin","children","Box","_jsxs","Paper","elevation","variant","square","marginTop","display","flexDirection","alignItems","bgcolor","Typography","mt","style","padding","FormControl","fullWidth","FormLabel","marginBottom","color","fontWeight","fontSize","TextField","placeholder","id","size","value","onBlur","handleBlur","onChange","handleChange","touched","Boolean","helperText","Button","mb","borderColor","borderRadius","textDecoration","textTransform"],"sourceRoot":""}