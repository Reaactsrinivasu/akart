{"version":3,"file":"static/js/252.231bbf7a.chunk.js","mappings":"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","sources":["common/Validations.js","pages/UserAuthentication/UserAccount/CreateUserAccount.js"],"sourcesContent":["import * as Yup from \"yup\";\r\nconst generateValidationSchema = (fields) => {\r\n  const validationRules = {};\r\n  fields.forEach((field) => {\r\n    switch (field) {\r\n      case \"name\":\r\n        validationRules.name = Yup.string()\r\n          .min(2, \"Name is Short!\")\r\n          .max(50, \"Name is Long!\")\r\n          .required(\"Name is required\");\r\n        break;\r\n      case \"email\":\r\n        validationRules.email = Yup.string()\r\n          .email(\"Invalid email address format\")\r\n          .required(\"Email is required\");\r\n        break;\r\n      case \"mobile_number\":\r\n        validationRules.mobile_number = Yup.string()\r\n          .required(\"Mobile Number is required\")\r\n          .matches(/^[6-9][0-9]{9}$/, \"Invalid Mobile Number\");\r\n        break;\r\n      case \"phone_number\":\r\n        validationRules.phone_number = Yup.string()\r\n          .required(\"Phone Number is required\")\r\n          .matches(/^[6-9][0-9]{9}$/, \"Invalid Phone Number\");\r\n        break;\r\n      case \"relationship\":\r\n        validationRules.relationship = Yup.string()\r\n          .min(3, \"Relationship is Short!\")\r\n          .max(50, \"Relationship is Long!\")\r\n          .required(\"Relationship is required\");\r\n        break;\r\n      case \"address\":\r\n        validationRules.address = Yup.string()\r\n          .min(5, \"Address is Short!\")\r\n          .max(100, \"Address is Long!\")\r\n          .required(\"Address is required\");\r\n        break;\r\n      case \"first_name\":\r\n        validationRules.first_name = Yup.string()\r\n          .min(2, \"First Name is Short!\")\r\n          .max(50, \"First Name is Long!\")\r\n          .required(\"First Name is required\");\r\n        break;\r\n      case \"last_name\":\r\n        validationRules.last_name = Yup.string()\r\n          .min(2, \"Last Name is Short!\")\r\n          .max(50, \"Last Name is Long!\")\r\n          .required(\"Last Name is required\");\r\n        break;\r\n      case \"password\":\r\n        validationRules.password = Yup.string()\r\n          .min(8, \"Password should be at least 8 characters\")\r\n          .required(\"Password is required\");\r\n        // .validateSync(value, { abortEarly: false }) || \"\";\r\n        break;\r\n      case \"password_confirmation\":\r\n        validationRules.password_confirmation = Yup.string()\r\n          .min(8, \"Password should be at least 8 characters\")\r\n          .required(\"Confirm Password is required\");\r\n        // .validateSync(value, { abortEarly: false }) || \"\";\r\n        break;\r\n\r\n      // Add additional fields as needed\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n \r\n  return Yup.object(validationRules);\r\n};\r\n \r\nconst initialValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  mobile_number: \"\",\r\n  relationship: \"\",\r\n  address: \"\",\r\n  first_name: \"\",\r\n  password: \"\",\r\n  password_confirmation: \"\"\r\n  \r\n};\r\n \r\nexport { initialValues, generateValidationSchema };","import React, { useState } from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Link from \"@mui/material/Link\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Container from \"@mui/material/Container\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\r\nimport { FormLabel,TextField } from \"@mui/material\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport EditOutlinedIcon from \"@mui/icons-material/EditOutlined\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport PhoneInput from \"react-phone-number-input\";\r\nimport \"react-phone-number-input/style.css\";\r\nimport { useFormik } from \"formik\";\r\nimport {\r\n  initialValues,\r\n  generateValidationSchema,\r\n} from \"../../../common/Validations\";\r\nimport \"./CustomPhoneInput.css\"; \r\n\r\nconst CreateUserAccount = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const receivedData = location?.state;\r\n  // console.log(\"receivedData\", receivedData);\r\n  const [value, setValue] = useState();\r\n  const handleSubmit = async (values) => {\r\n    console.log('values', values);\r\n    try {\r\n      // Make the API call directly in the component\r\n      // dispatch(signupWithEmailInitiate(values, navigate));\r\n      // navigate(\"/otp/otpverify\", { state: formik.values.email });\r\n      // Dispatch the success action\r\n      // dispatch(createSignupWithEmailIdSuccess(result));\r\n    } catch (error) {\r\n      // Dispatch the error action\r\n      // dispatch(createSignupWithEmailIdError(error));\r\n    }\r\n  };\r\n  const formFields = [\r\n    \"first_name\",\r\n    \"last_name\",\r\n    \"phone_number\",\r\n    \"email\",\r\n    \"password\",\r\n    \"password_confirmation\",\r\n  ];\r\n  const validationSchema = generateValidationSchema(formFields);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      first_name: \"\",\r\n      last_name: \"\",\r\n      phone_number: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      password_confirmation: \"\",\r\n    },\r\n    validationSchema: validationSchema,\r\n    onSubmit: (values) => handleSubmit(values),\r\n  });\r\n  return (\r\n    <>\r\n      <Container\r\n        component=\"main\"\r\n        maxWidth=\"sm\"\r\n        sx={{\r\n          margin: \"auto\",\r\n        }}\r\n      >\r\n        <Box>\r\n          <Paper\r\n            elevation={1}\r\n            variant=\"elevation\"\r\n            square={false}\r\n            sx={{\r\n              marginTop: 8,\r\n              padding: \"20px\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n              bgcolor: \"#fff\",\r\n            }}\r\n          >\r\n            <Typography variant=\"h5\">Create Your Account</Typography>\r\n            <Box\r\n              component=\"form\"\r\n              onSubmit={formik.handleSubmit}\r\n              // onSubmit={handleSubmit}\r\n              // noValidate\r\n              sx={{ mt: 1, padding: \"25px\" }}\r\n            >\r\n              <FormControl fullWidth sx={{ marginBottom: \"10px\" }}>\r\n                <FormLabel\r\n                  sx={{\r\n                    marginBottom: \"5px\",\r\n                    color: \"#000\",\r\n                    fontWeight: 400,\r\n                    fontSize: \"15px\",\r\n                  }}\r\n                >\r\n                  Your First Name\r\n                </FormLabel>\r\n                <TextField\r\n                  type=\"text\"\r\n                  id=\"first_name\"\r\n                  name=\"first_name\"\r\n                  size=\"small\"\r\n                  value={formik.values.first_name}\r\n                  onBlur={formik.handleBlur}\r\n                  onChange={formik.handleChange}\r\n                  error={\r\n                    formik.touched.first_name &&\r\n                    Boolean(formik.errors.first_name)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.first_name && formik.errors.first_name\r\n                  }\r\n                />\r\n              </FormControl>\r\n              <FormControl fullWidth sx={{ marginBottom: \"10px\" }}>\r\n                <FormLabel\r\n                  sx={{\r\n                    marginBottom: \"5px\",\r\n                    color: \"#000\",\r\n                    fontWeight: 400,\r\n                    fontSize: \"15px\",\r\n                  }}\r\n                >\r\n                  Your Last Name\r\n                </FormLabel>\r\n                <TextField\r\n                  type=\"text\"\r\n                  id=\"last_name\"\r\n                  name=\"last_name\"\r\n                  size=\"small\"\r\n                  value={formik.values.last_name}\r\n                  onBlur={formik.handleBlur}\r\n                  onChange={formik.handleChange}\r\n                  error={\r\n                    formik.touched.last_name && Boolean(formik.errors.last_name)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.last_name && formik.errors.last_name\r\n                  }\r\n                />\r\n              </FormControl>\r\n              <FormControl fullWidth sx={{ marginBottom: \"10px\" }}>\r\n                <FormLabel\r\n                  sx={{\r\n                    marginBottom: \"5px\",\r\n                    color: \"#000\",\r\n                    fontWeight: 400,\r\n                    fontSize: \"15px\",\r\n                  }}\r\n                >\r\n                  Mobile Number\r\n                </FormLabel>\r\n                {/* <PhoneInput\r\n                  // placeholder=\"Enter phone number\"\r\n                  defaultCountry=\"IN\"\r\n                  // value={value}\r\n                  // onChange={setValue}\r\n                  style={{\r\n                    border: \"1px solid #ccc\",\r\n                    borderRadius: \"4px\",\r\n                    // padding: \"2px\",\r\n                  }}\r\n                  value={formik.values.phone_number}\r\n                  onBlur={formik.handleBlur}\r\n                  onChange={formik.handleChange}\r\n                  error={\r\n                    formik.touched.phone_number &&\r\n                    Boolean(formik.errors.phone_number)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.phone_number && formik.errors.phone_number\r\n                  }\r\n                /> */}\r\n                <TextField\r\n                  type=\"text\"\r\n                  id=\"phone_number\"\r\n                  name=\"phone_number\"\r\n                  size=\"small\"\r\n                  value={formik.values.phone_number}\r\n                  onBlur={formik.handleBlur}\r\n                  onChange={formik.handleChange}\r\n                  error={\r\n                    formik.touched.phone_number &&\r\n                    Boolean(formik.errors.phone_number)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.phone_number && formik.errors.phone_number\r\n                  }\r\n                />\r\n              </FormControl>\r\n              <FormControl fullWidth sx={{ marginBottom: \"10px\" }}>\r\n                <FormLabel\r\n                  sx={{\r\n                    marginBottom: \"5px\",\r\n                    color: \"#000\",\r\n                    fontWeight: 400,\r\n                    fontSize: \"15px\",\r\n                  }}\r\n                >\r\n                  Your Email Id\r\n                </FormLabel>\r\n                <TextField\r\n                  type=\"email\"\r\n                  id=\"email\"\r\n                  name=\"email\"\r\n                  size=\"small\"\r\n                  // value={receivedData.email}\r\n                  // disabled\r\n                  // readOnly\r\n                  value={formik.values.email}\r\n                  onBlur={formik.handleBlur}\r\n                  onChange={formik.handleChange}\r\n                  error={formik.touched.email && Boolean(formik.errors.email)}\r\n                  helperText={formik.touched.email && formik.errors.email}\r\n                />\r\n              </FormControl>\r\n              <FormControl fullWidth sx={{ marginBottom: \"10px\" }}>\r\n                <FormLabel\r\n                  sx={{\r\n                    marginBottom: \"5px\",\r\n                    color: \"#000\",\r\n                    fontWeight: 400,\r\n                    fontSize: \"15px\",\r\n                  }}\r\n                >\r\n                  Password\r\n                </FormLabel>\r\n                <TextField\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  name=\"password\"\r\n                  size=\"small\"\r\n                  value={formik.values.password}\r\n                  onBlur={formik.handleBlur}\r\n                  onChange={formik.handleChange}\r\n                  error={\r\n                    formik.touched.password && Boolean(formik.errors.password)\r\n                  }\r\n                  helperText={formik.touched.password && formik.errors.password}\r\n                />\r\n              </FormControl>\r\n              <FormControl fullWidth sx={{ marginBottom: \"10px\" }}>\r\n                <FormLabel\r\n                  sx={{\r\n                    marginBottom: \"5px\",\r\n                    color: \"#000\",\r\n                    fontWeight: 400,\r\n                    fontSize: \"15px\",\r\n                  }}\r\n                >\r\n                  Confirm Password\r\n                </FormLabel>\r\n                <TextField\r\n                  type=\"password\"\r\n                  id=\"password_confirmation\"\r\n                  name=\"password_confirmation\"\r\n                  size=\"small\"\r\n                  value={formik.values.password_confirmation}\r\n                  onBlur={formik.handleBlur}\r\n                  onChange={formik.handleChange}\r\n                  error={\r\n                    formik.touched.password_confirmation && Boolean(formik.errors.password_confirmation)\r\n                  }\r\n                  helperText={formik.touched.password_confirmation && formik.errors.password_confirmation}\r\n                />\r\n              </FormControl>\r\n              {/* <FormControl fullWidth>\r\n                <FormLabel\r\n                  sx={{\r\n                    marginTop: \"13px\",\r\n                    marginBottom: \"10px\",\r\n                    color: \"#000\",\r\n                    fontWeight: 400,\r\n                    fontSize: \"15px\",\r\n                  }}\r\n                >\r\n                  Enter Your Password\r\n                </FormLabel>\r\n                <OutlinedInput\r\n                  placeholder=\"password\"\r\n                  id=\"password\"\r\n                  name=\"password\"\r\n                  size=\"small\"\r\n                  type=\"password\"\r\n                  // value={password}\r\n                  // value={emailLoginData.password || \"\"}\r\n                  // onChange={onInputChange}\r\n                  // onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n              </FormControl> */}\r\n              <Button\r\n                type=\"submit\"\r\n                sx={{\r\n                  mt: 3,\r\n                  mb: 2,\r\n                  color: \"#111\",\r\n                  bgcolor: \"#FFD814\",\r\n                  borderColor: \"#FCD200\",\r\n                  borderRadius: \"md\",\r\n                  textDecoration: \"none\",\r\n                  textTransform: \"none\",\r\n                  \"&:hover\": {\r\n                    bgcolor: \"#FCD200\",\r\n                  },\r\n                }}\r\n                fullWidth\r\n                // onClick={() => handleSubmit()}\r\n              >\r\n                Continue\r\n              </Button>\r\n              {/* <Grid container sx={{ marginBottom: \"8px\" }}>\r\n                <Grid item xs>\r\n                  <Link href=\"#\" variant=\"body2\">\r\n                    Forgot password?\r\n                  </Link>\r\n                </Grid>\r\n              </Grid> */}\r\n            </Box>\r\n          </Paper>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateUserAccount"],"names":["generateValidationSchema","fields","validationRules","forEach","field","name","Yup","min","max","required","email","mobile_number","matches","phone_number","relationship","address","first_name","last_name","password","password_confirmation","CreateUserAccount","location","useLocation","value","setValue","useNavigate","useDispatch","state","useState","validationSchema","formik","useFormik","initialValues","onSubmit","values","async","console","log","handleSubmit","_jsx","_Fragment","children","Container","component","maxWidth","sx","margin","Box","_jsxs","Paper","elevation","variant","square","marginTop","padding","display","flexDirection","alignItems","bgcolor","Typography","mt","FormControl","fullWidth","marginBottom","FormLabel","color","fontWeight","fontSize","TextField","type","id","size","onBlur","handleBlur","onChange","handleChange","error","touched","Boolean","errors","helperText","Button","mb","borderColor","borderRadius","textDecoration","textTransform"],"sourceRoot":""}