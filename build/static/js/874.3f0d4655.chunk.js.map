{"version":3,"file":"static/js/874.3f0d4655.chunk.js","mappings":"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","sources":["common/Validations.js","redux/apis/emailSignupApi.js","redux/actions/emailSignupActions.js","pages/UserAuthentication/SignUp/EmailSignUp.js"],"sourcesContent":["import * as Yup from \"yup\";\r\nconst generateValidationSchema = (fields) => {\r\n  const validationRules = {};\r\n  fields.forEach((field) => {\r\n    switch (field) {\r\n      case \"name\":\r\n        validationRules.name = Yup.string()\r\n          .min(2, \"Name is Short!\")\r\n          .max(50, \"Name is Long!\")\r\n          .required(\"Name is required\");\r\n        break;\r\n      case \"email\":\r\n        validationRules.email = Yup.string()\r\n          .email(\"Invalid email address format\")\r\n          .required(\"Email is required\");\r\n        break;\r\n      case \"mobile_number\":\r\n        validationRules.mobile_number = Yup.string()\r\n          .required(\"Mobile Number is required\")\r\n          .matches(/^[6-9][0-9]{9}$/, \"Invalid Mobile Number\");\r\n        break;\r\n      case \"phone_number\":\r\n        validationRules.phone_number = Yup.string()\r\n          .required(\"Phone Number is required\")\r\n          .matches(/^[6-9][0-9]{9}$/, \"Invalid Phone Number\");\r\n        break;\r\n      case \"relationship\":\r\n        validationRules.relationship = Yup.string()\r\n          .min(3, \"Relationship is Short!\")\r\n          .max(50, \"Relationship is Long!\")\r\n          .required(\"Relationship is required\");\r\n        break;\r\n      case \"address\":\r\n        validationRules.address = Yup.string()\r\n          .min(5, \"Address is Short!\")\r\n          .max(100, \"Address is Long!\")\r\n          .required(\"Address is required\");\r\n        break;\r\n      case \"first_name\":\r\n        validationRules.first_name = Yup.string()\r\n          .min(2, \"First Name is Short!\")\r\n          .max(50, \"First Name is Long!\")\r\n          .required(\"First Name is required\");\r\n        break;\r\n      case \"last_name\":\r\n        validationRules.last_name = Yup.string()\r\n          .min(2, \"Last Name is Short!\")\r\n          .max(50, \"Last Name is Long!\")\r\n          .required(\"Last Name is required\");\r\n        break;\r\n      case \"password\":\r\n        validationRules.password = Yup.string()\r\n          .min(8, \"Password should be at least 8 characters\")\r\n          .required(\"Password is required\");\r\n        // .validateSync(value, { abortEarly: false }) || \"\";\r\n        break;\r\n      case \"password_confirmation\":\r\n        validationRules.password_confirmation = Yup.string()\r\n          .min(8, \"Password should be at least 8 characters\")\r\n          .required(\"Confirm Password is required\");\r\n        // .validateSync(value, { abortEarly: false }) || \"\";\r\n        break;\r\n\r\n      // Add additional fields as needed\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n \r\n  return Yup.object(validationRules);\r\n};\r\n \r\nconst initialValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  mobile_number: \"\",\r\n  relationship: \"\",\r\n  address: \"\",\r\n  first_name: \"\",\r\n  password: \"\",\r\n  password_confirmation: \"\"\r\n  \r\n};\r\n \r\nexport { initialValues, generateValidationSchema };","\r\nimport API from \"../../API/API.js\";\r\nconst api = new API();\r\nconst endPoints = \"accounts\";\r\nexport const createEmailSignupApi = async (users) => {\r\n  // console.log('users in api', users);\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const result = await api.post(`${endPoints}`, users);\r\n      console.log('result in api', result);\r\n      resolve(result);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n","import * as types from \"./actionTypes\";\r\nimport { createEmailSignupApi } from \"../apis/emailSignupApi\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\n//post signup with email id\r\nexport const createSignupWithEmailIdStart = (users) => (\r\n  // console.log('users', users),\r\n  {\r\n    type: types.SIGNUP_USING_EMAILID_START,\r\n    payload: users,\r\n  }\r\n);\r\nexport const createSignupWithEmailIdSuccess = () => ({\r\n  type: types.SIGNUP_USING_EMAILID_SUCCESS,\r\n});\r\nexport const createSignupWithEmailIdError = (error) => ({\r\n  type: types.SIGNUP_USING_EMAILID_ERROR,\r\n  payload: error,\r\n}\r\n);\r\nexport const signupWithEmailInitiate = (user,navigate) => {\r\n  return function (dispatch) {\r\n    dispatch(createSignupWithEmailIdStart(user));\r\n    createEmailSignupApi(user)\r\n      .then((res) => {\r\n        let email = res.data?.account.email;\r\n        let id = res.data?.account.id;\r\n        let userData = {email:email,id:id}\r\n        console.log(res);\r\n        dispatch(createSignupWithEmailIdSuccess(res));\r\n        if (res.status === 201) {\r\n          navigate(\"/otp/otpverify\", { state: userData });\r\n        }\r\n      })\r\n      .catch((error) => dispatch(createSignupWithEmailIdError(error.message)));\r\n  };\r\n};\r\nexport default {\r\n  signupWithEmailInitiate,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Link from \"@mui/material/Link\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { toast } from \"react-toastify\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Container from \"@mui/material/Container\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\r\nimport { FormLabel, TextField } from \"@mui/material\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport EditOutlinedIcon from \"@mui/icons-material/EditOutlined\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useFormik } from \"formik\";\r\nimport {\r\n  initialValues,\r\n  generateValidationSchema,\r\n} from \"../../../common/Validations\";\r\nimport { signupWithEmailInitiate } from \"../../../redux/actions/emailSignupActions\";\r\nconst EmailSignUp = () => {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const handleSubmit = async (values) => {\r\n    try {\r\n      // Make the API call directly in the component  \r\n      dispatch(signupWithEmailInitiate(values,navigate));\r\n      // navigate(\"/otp/otpverify\", { state: formik.values.email });\r\n      // Dispatch the success action\r\n      // dispatch(createSignupWithEmailIdSuccess(result));\r\n    } catch (error) {\r\n      // Dispatch the error action\r\n      // dispatch(createSignupWithEmailIdError(error));\r\n    }\r\n  };\r\n\r\n  const formFields = [\"email\"];\r\n  const validationSchema = generateValidationSchema(formFields);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: \"\",\r\n      type:\"email_account\",\r\n    },\r\n    validationSchema: validationSchema,\r\n    onSubmit: (values) => handleSubmit(values),\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Container\r\n        component=\"main\"\r\n        maxWidth=\"xs\"\r\n        sx={{\r\n          margin: \"auto\",\r\n        }}\r\n      >\r\n        <Box>\r\n          <Paper\r\n            elevation={1}\r\n            variant=\"elevation\"\r\n            square={false}\r\n            sx={{\r\n              marginTop: 10,\r\n              padding: \"10px\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n              bgcolor: \"#fff\",\r\n            }}\r\n          >\r\n            <Typography component=\"h1\" variant=\"h5\" mt={2}>\r\n              Sign Up\r\n            </Typography>\r\n            <form onSubmit={formik.handleSubmit} style={{ marginTop: \"20px\" }}>\r\n              <FormControl fullWidth>\r\n                <FormLabel\r\n                  sx={{\r\n                    marginBottom: \"10px\",\r\n                    color: \"#000\",\r\n                    fontWeight: 400,\r\n                    fontSize: \"15px\",\r\n                  }}\r\n                >\r\n                  Enter Your Email Id\r\n                </FormLabel>\r\n                <TextField\r\n                  placeholder=\"enter your email id\"\r\n                  id=\"email\"\r\n                  name=\"email\"\r\n                  size=\"small\"\r\n                  value={formik.values.email}\r\n                  onBlur={formik.handleBlur}\r\n                  onChange={formik.handleChange}\r\n                  error={formik.touched.email && Boolean(formik.errors.email)}\r\n                  helperText={formik.touched.email && formik.errors.email}\r\n                />\r\n              </FormControl>\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                sx={{\r\n                  mt: 3,\r\n                  mb: 2, // margin top\r\n                  color: \"#111\",\r\n                  bgcolor: \"#FFD814\",\r\n                  borderColor: \"#FCD200\",\r\n                  borderRadius: \"md\",\r\n                  textDecoration: \"none\",\r\n                  textTransform: \"none\",\r\n                  \"&:hover\": {\r\n                    bgcolor: \"#FCD200\",\r\n                  },\r\n                }}\r\n              >\r\n                Send OTP\r\n              </Button>\r\n              <Grid container sx={{ marginBottom: \"8px\" }}>\r\n                <Grid item xs>\r\n                  <Link href=\"#\" variant=\"body2\">\r\n                    Forgot password ?\r\n                  </Link>\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n          </Paper>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EmailSignUp;\r\n"],"names":["generateValidationSchema","fields","validationRules","forEach","field","name","Yup","min","max","required","email","mobile_number","matches","phone_number","relationship","address","first_name","last_name","password","password_confirmation","api","API","signupWithEmailInitiate","user","navigate","dispatch","users","type","types","payload","async","Promise","resolve","reject","result","post","concat","console","log","error","createEmailSignupApi","then","res","_res$data","_res$data2","userData","data","account","id","status","state","catch","createSignupWithEmailIdError","message","EmailSignUp","useNavigate","useDispatch","validationSchema","formik","useFormik","initialValues","onSubmit","values","handleSubmit","_jsx","_Fragment","children","Container","component","maxWidth","sx","margin","Box","_jsxs","Paper","elevation","variant","square","marginTop","padding","display","flexDirection","alignItems","bgcolor","Typography","mt","style","FormControl","fullWidth","FormLabel","marginBottom","color","fontWeight","fontSize","TextField","placeholder","size","value","onBlur","handleBlur","onChange","handleChange","touched","Boolean","errors","helperText","Button","mb","borderColor","borderRadius","textDecoration","textTransform","Grid","container","item","xs","Link","href"],"sourceRoot":""}